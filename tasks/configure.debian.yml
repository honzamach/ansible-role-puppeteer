---

- name: Managing central Ansible playbook repository storage
  file:
    path: /var/ansible
    owner: root
    group: root
    mode: 0755
    state: directory

#-------------------------------------------------------------------------------

- name: Creating user groups for custom Ansible playbook repositories
  group:
    name: "{{ item['key'] }}"
    state: present
  with_dict: "{{ hm_puppeteer__repositories }}"

- name: Creating Git repositories for custom Ansible playbooks
  shell: /usr/bin/git init --bare --shared "/var/ansible/{{ item.key }}"
  args:
    creates: "/var/ansible/{{ item.key }}"
  with_dict: "{{ hm_puppeteer__repositories }}"

- name: Ensuring correct ownerwhips and permissions for custom Ansible playbook repositories
  file:
    path: "/var/ansible/{{ item.key }}"
    owner: root
    group: "{{ item.key }}"
    mode: "2770"
    state: directory
  with_dict: "{{ hm_puppeteer__repositories }}"

- name: Ensuring correct ownerwhips and permissions for custom Ansible playbook repository contents
  file:
    path: "/var/ansible/{{ item.key }}"
    owner: root
    group: "{{ item.key }}"
    state: directory
    recurse: yes
  with_dict: "{{ hm_puppeteer__repositories }}"

#-------------------------------------------------------------------------------

- name: Ensuring main Ansible access directory for each unprivileged user account
  file:
    path: "/home/{{ item['key'] }}/ansible"
    owner: "{{ item['key'] }}"
    group: "{{ item['key'] }}"
    mode: 0750
    state: directory
  with_dict: "{{ hm_accounts__users }}"

- name: Linking appropriate repositories for each unprivileged user account
  file:
    src: "/var/ansible/{{ item[0].key }}"
    dest: "/home/{{ item[1].key }}/ansible/{{ item[0].key }}"
    state: link
  with_nested:
     - "{{ hm_puppeteer__repositories | dict2items }}"
     - "{{ hm_accounts__users | dict2items }}"
  when: hm_puppeteer__repositories[item[0].key] in hm_accounts__users[item[1].key]['groups']

- name: Detecting list of all existing Ansible repositories
  find:
    paths: "/var/ansible"
    file_type: directory
  register: result_ansible_reps

- name: Detecting list of existing links to main Ansible repository access directory for each unprivileged user account
  shell: "/usr/bin/find /home/{{ item['key'] }}/ansible -type l"
  with_dict: "{{ hm_accounts__users }}"
  register: result_ansible_links
  changed_when: False

- name: Removing unnecessary links to main Ansible repository access directory for each unprivileged user account
  file:
    path: "/home/{{ item[0]['item']['key'] }}/ansible/{{ item[1]|basename }}"
    state: absent
  with_subelements:
    - "{{ result_ansible_links['results'] }}"
    - stdout_lines
  when: (item[1]|basename not in hm_puppeteer__repositories) or (hm_puppeteer__repositories[item[1]|basename] not in hm_accounts__users[item[0]['item']['key']]['groups'])

